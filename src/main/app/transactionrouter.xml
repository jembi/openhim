<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="CE-3.2.1" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd 
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd ">
    <flow name="MediationFlow" doc:name="MediationFlow">
        <vm:inbound-endpoint exchange-pattern="request-response" path="transactionRouterQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Read queue"/>
        <logger message="Starting normalization on structured message: #[groovy: message.payload.toString();]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="message.payload.path.contains('ws/rest/v1/facilities')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: query facilities" level="INFO" doc:name="Log query facilities"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="queryFacilities-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to queryFacilities-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/facility/')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: get facility" level="INFO" doc:name="Log get facility"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="getFacility-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to getFacility-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/professional/')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: get professional" level="INFO" doc:name="Log get professional"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="getProfessional-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to getProfessional-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/professionals')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: query professionals" level="INFO" doc:name="Log query professionals"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="queryProfessionals-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to queryProfessionals-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/patient/') &amp;&amp; message.payload.path.contains('/encounters') &amp;&amp; message.payload.httpMethod.equals('GET')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: query encounters" level="INFO" doc:name="Log query encounters"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="queryEncounters-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to queryEncounters-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/patient/') &amp;&amp; message.payload.path.contains('/encounters') &amp;&amp; message.payload.httpMethod.equals('POST')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: save encounters" level="INFO" doc:name="Log save encounters"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="saveEncounters-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to saveEncounters-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/patient/') &amp;&amp; message.payload.path.contains('/encounter/') &amp;&amp; message.payload.httpMethod.equals('GET')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: get encounter" level="INFO" doc:name="Log get encounter"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="getEncounter-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to getEncounter-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/patients') &amp;&amp; message.payload.httpMethod.equals('POST')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: save patient" level="INFO" doc:name="Log save patient"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="savePatient-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to savePatient-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/patients') &amp;&amp; message.payload.httpMethod.equals('GET')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: query patients" level="INFO" doc:name="Log query patients"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="queryPatients-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to queryPatients-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/patient/') &amp;&amp; message.payload.httpMethod.equals('GET')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: get patients" level="INFO" doc:name="Log get patients"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="getPatient-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to getPatient-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/patient/') &amp;&amp; message.payload.httpMethod.equals('PUT')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: update patients" level="INFO" doc:name="Log update patients"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="updatePatient-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to updatePatient-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <when expression="message.payload.path.contains('ws/rest/v1/alerts') &amp;&amp; message.payload.httpMethod.equals('POST')" evaluator="groovy">
                <processor-chain>
                    <logger message="Transaction type: receive alert" level="INFO" doc:name="Log receive alert"/>
                    <vm:outbound-endpoint exchange-pattern="request-response" path="receiveAlert-Generic-NormalizationQueue" responseTimeout="10000" mimeType="text/plain" doc:name="Send to receiveAlert-Generic-NormalizationQueue"/>
                </processor-chain>
            </when>
            <otherwise>
                <processor-chain>
                    <logger message="Could not route message with path: #[groovy: return message.payload.getPath();]" level="ERROR" doc:name="Error Logged"/>
                    <scripting:component doc:name="Throw an exception">
                        <scripting:script engine="Groovy">
                            <scripting:text><![CDATA[throw new Exception("Unknown transaction type, check the the HTTP method and path are correct for the endpoint you are trying to access");]]></scripting:text>
                        </scripting:script>
                    </scripting:component>
                </processor-chain>
            </otherwise>
        </choice>
    </flow>
</mule>
